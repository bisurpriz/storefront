query getUserById($id: uuid = "") {
  user_by_pk(id: $id) {
    id
    created_at
    email
    firstname
    lastname
    picture
    phone
    reference_code
    user_addresses {
      address_title
      address
    }
    carts {
      id
      content
    }
    favorites {
      product_id
    }
  }
}

mutation updateUserById(
  $id: uuid!
  $firstname: String
  $lastname: String
  $phone: String
  $picture: String
) {
  update_user_by_pk(
    pk_columns: { id: $id }
    _set: {
      firstname: $firstname
      lastname: $lastname
      phone: $phone
      picture: $picture
    }
  ) {
    email
    firstname
    lastname
    phone
    picture
  }
}

query getUserOrders {
  order(where: { payment_status: { _eq: PAID } }) {
    created_at
    id
    order_no
    total_amount
    tenant_orders {
      id
      tenant {
        id
        tenants {
          name
          id
        }
      }
      order_items {
        id
        order_item_no
        product_id
        quantity
        status
        order_item_special_images {
          image_url
          quantity_index
          id
        }
        order_item_special_texts {
          content
          quantity_index
          id
        }
        product {
          product_categories {
            category {
              name
              slug
            }
          }
          id
          slug
          image_url
          name
          quantity
          product_customizable_areas {
            count
            max_character
            customizable_area {
              id
              type
            }
          }
        }
      }
      order_status {
        value
      }
      order_items_aggregate {
        aggregate {
          count(columns: id)
        }
      }
    }
  }
}

query getUserByEmail($email: String!) {
  user(where: { email: { _eq: $email } }) {
    id
    provider_id
  }
}

mutation UpdateOrderItemSpecialText(
  $object: [order_item_special_text_insert_input!]!
) {
  insert_order_item_special_text(
    objects: $object
    on_conflict: {
      constraint: order_item_special_text_pkey
      update_columns: [content]
    }
  ) {
    affected_rows
  }
}
