"use client";

import {
  checkAIAvailability,
  createGeneratedNotes,
  GeneratedNote,
} from "@/app/(cart)/cart/customize/[oId]/actions";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
} from "@/components/ui/drawer";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useCart } from "@/contexts/CartContext";
import { useToast } from "@/hooks/use-toast";
import useResponsive from "@/hooks/useResponsive";
import { cn } from "@/lib/utils";
import {
  Loader2,
  MessageSquarePlus,
  MessageSquareText,
  Send,
  Sparkles,
} from "lucide-react";
import { useRef, useState, useTransition } from "react";

type GiftCardNoteProps = {
  id: number;
  product_description: string;
  product_name: string;
  card_note: string;
  index: number;
};

const sanitize = (description: string) => {
  const sanitized = description.replace(/<[^>]*>?/g, "");
  return sanitized.replace(/&nbsp;/g, " ");
};

export function GiftCardNote({
  id,
  product_description,
  product_name,
  card_note,
  index,
}: GiftCardNoteProps) {
  const [note, setNote] = useState<string>(card_note);
  const [isOpen, setIsOpen] = useState(false);
  const [generatedNotes, setGeneratedNotes] = useState<GeneratedNote[]>([]);
  const [isPending, startTransition] = useTransition();
  const [recipient, setRecipient] = useState("");
  const [userNotes, setUserNotes] = useState("");
  // Track which notes were generated by AI
  const [aiGeneratedIndexes, setAiGeneratedIndexes] = useState<Set<number>>(
    new Set(),
  );
  const { isDesktop } = useResponsive();
  const { toast } = useToast();
  const { updateCartItemNote } = useCart();
  const sanitizedProductDescription = sanitize(product_description);

  const handleNoteChange = (value: string) => {
    setNote(value);
  };

  const handleGenerateClick = async () => {
    const aiAvailable = await checkAIAvailability();

    if (!aiAvailable.status) {
      toast({
        variant: "destructive",
        title: "Yapay Zeka Servisi Kullanılamıyor",
        description:
          "Lütfen daha sonra tekrar deneyiniz veya notlarınızı manuel olarak giriniz.",
      });
      return;
    }

    setIsOpen(true);
  };

  const handleGenerate = async () => {
    if (!recipient || !userNotes) {
      toast({
        variant: "destructive",
        title: "Eksik Bilgi",
        description: "Lütfen tüm gerekli alanları doldurunuz.",
      });
      return;
    }

    startTransition(async () => {
      try {
        const generated = await createGeneratedNotes({
          product_name,
          product_description: sanitizedProductDescription,
          user_notes: userNotes,
          recipient,
          number_of_notes: 3,
        });

        if (generated) {
          setGeneratedNotes(generated);
        }
      } catch (error) {
        toast({
          variant: "destructive",
          title: "Not Oluşturma Başarısız",
          description:
            "Notlar oluşturulurken bir hata oluştu. Lütfen tekrar deneyiniz.",
        });
      }
    });
  };

  const handleSelectNote = (note: string, index: number) => {
    handleNoteChange(note);
    setAiGeneratedIndexes((prev) => new Set(prev.add(index)));
    updateCartItemNote(id, note, index);
    setIsOpen(false);
  };

  const handleViewGeneratedNotes = (index: number) => {
    if (generatedNotes.length) {
      setIsOpen(true);
    }
  };

  const LoadingContent = (
    <div className="flex flex-col items-center justify-center space-y-4 py-8">
      <div className="relative">
        <div className="h-24 w-24 animate-pulse rounded-full bg-gradient-to-r from-blue-600 to-purple-600" />
        <div className="absolute inset-0 flex items-center justify-center">
          <Sparkles className="h-12 w-12 animate-bounce text-white" />
        </div>
      </div>
      <div className="space-y-2 text-center">
        <h3 className="text-lg font-medium text-gray-900">
          Yapay Zeka Notlarınızı Oluşturuyor
        </h3>
        <p className="text-sm text-gray-500">
          Sizin için en iyi hediye notları hazırlanıyor...
        </p>
      </div>
      <div className="flex space-x-2">
        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-600 [animation-delay:-0.3s]" />
        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-600 [animation-delay:-0.15s]" />
        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-600" />
      </div>
    </div>
  );

  const Content = (
    <div className="flex h-full flex-col">
      <div className="flex-1 space-y-6 overflow-y-auto px-6">
        <div className="space-y-2 pt-2">
          <Label htmlFor="recipient" className="text-sm font-medium">
            Kime
          </Label>
          <Input
            id="recipient"
            value={recipient}
            onChange={(e) => setRecipient(e.target.value)}
            placeholder="Eşime, arkadaşıma, anne ve babama, çocuğuma, vb."
            className="border-gray-200 focus:border-blue-500"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="notes" className="text-sm font-medium">
            Konu
          </Label>
          <Textarea
            id="notes"
            value={userNotes}
            onChange={(e) => setUserNotes(e.target.value)}
            placeholder="Yeni yıl, yeni iş, doğum günü, evlilik yıldönümü, tebrik vb."
            className="border-gray-200 focus:border-blue-500"
          />
        </div>

        {!generatedNotes.length ? (
          <div className="pb-6">
            <Button
              onClick={handleGenerate}
              disabled={isPending}
              className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg transition-all duration-200 hover:from-blue-700 hover:to-purple-700 hover:shadow-xl"
            >
              {isPending ? (
                <>
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  Not Oluşturuluyor...
                </>
              ) : (
                <>
                  <Sparkles className="mr-2 h-5 w-5" />
                  Yapay Zeka ile Not Oluştur
                </>
              )}
            </Button>
          </div>
        ) : (
          <div className="space-y-4 pb-6">
            <h3 className="font-medium text-gray-900">
              Oluşturulan notlardan birini seçiniz:
            </h3>
            {generatedNotes.map((genNote, idx) => (
              <div
                key={idx}
                onClick={() => handleSelectNote(genNote.note, 0)}
                className="group cursor-pointer rounded-lg border border-gray-200 bg-gradient-to-r from-blue-200 to-purple-400 p-4 transition-all duration-200 hover:border-blue-500 hover:bg-blue-200"
              >
                <div className="flex items-start justify-between">
                  <p className="text-sm text-gray-700">{genNote.note}</p>
                  <Send className="h-5 w-5 text-gray-400 opacity-0 transition-opacity group-hover:opacity-100" />
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  const GenerateButton = ({ index }: { index: number }) => {
    const isAiGenerated = aiGeneratedIndexes.has(index);
    if (note) {
      return null;
    }

    return (
      <Button
        variant="outline"
        onClick={
          isAiGenerated
            ? () => handleViewGeneratedNotes(index)
            : handleGenerateClick
        }
        className={cn(
          "w-full border-2 transition-all duration-200",
          isAiGenerated
            ? "border-blue-200 bg-gradient-to-r from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200"
            : "bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg transition-all duration-200 hover:from-blue-700 hover:to-purple-700 hover:text-white hover:shadow-xl",
        )}
      >
        {isAiGenerated ? (
          <>
            <MessageSquareText className="mr-2 h-5 w-5 text-blue-600" />
            Oluşturulmuş Notları Görüntüle
          </>
        ) : (
          <>
            <MessageSquarePlus className="mr-2 h-5 w-5 text-white" />
            Yapay Zeka ile Not Oluştur
          </>
        )}
      </Button>
    );
  };

  const debounceRef = useRef<NodeJS.Timeout>(null);

  const handleOnChangeNote = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    handleNoteChange(value);

    if (debounceRef.current) {
      clearTimeout(debounceRef.current);
    }

    debounceRef.current = setTimeout(() => {
      updateCartItemNote(id, note, index);
    }, 1000);
  };

  return (
    <div className="space-y-6">
      <div className="space-y-2">
        <Textarea
          value={note}
          onChange={handleOnChangeNote}
          placeholder="Hediye notunuzu buraya giriniz..."
          className={cn(
            "min-h-[120px] border-gray-200 focus:border-blue-500",
            aiGeneratedIndexes.has(0) && "bg-blue-50/30",
          )}
        />
        <GenerateButton index={0} />
      </div>

      {!isDesktop ? (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
          <DialogContent className="flex max-h-[80vh] max-w-2xl flex-col">
            <DialogHeader>
              <DialogTitle className="text-center text-xl font-semibold text-gray-900">
                {generatedNotes.length
                  ? "Oluşturulmuş Notlar"
                  : "Yapay Zeka ile Not Oluştur"}
              </DialogTitle>
            </DialogHeader>
            {isPending ? LoadingContent : Content}
          </DialogContent>
        </Dialog>
      ) : (
        <Drawer open={isOpen} onOpenChange={setIsOpen}>
          <DrawerContent className="max-h-[85vh]">
            <DrawerHeader className="pb-4">
              <DrawerTitle className="text-center text-xl font-semibold text-gray-900">
                {generatedNotes.length
                  ? "Oluşturulmuş Notlar"
                  : "Yapay Zeka ile Not Oluştur"}
              </DrawerTitle>
            </DrawerHeader>
            {isPending ? LoadingContent : Content}
          </DrawerContent>
        </Drawer>
      )}
    </div>
  );
}
